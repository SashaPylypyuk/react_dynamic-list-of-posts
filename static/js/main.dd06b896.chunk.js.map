{"version":3,"sources":["api/api.ts","CommentList/CommentList.tsx","PostList/PostList.tsx","App.tsx","index.tsx"],"names":["BASE_URL","getPosts","a","fetch","then","res","json","getUsers","getComments","CommentList","comments","map","comment","className","name","body","PostList","listOfPosts","post","user","title","App","useState","setPost","filteredPosts","setFilteredPosts","query","setQuery","isLoaded","setLoading","length","value","onChange","e","target","string","toLowerCase","trim","serchedPosts","filter","includes","type","onClick","Promise","all","posts","users","preperdPosts","find","person","id","userId","postId","finally","ReactDOM","render","document","getElementById"],"mappings":"6PAAMA,EAAW,uCAEV,SAAeC,IAAtB,+B,4CAAO,sBAAAC,EAAA,+EACEC,MAAM,GAAD,OAAIH,EAAJ,WAAsBI,MAAK,SAAAC,GAAG,OAAIA,EAAIC,WAD7C,4C,sBAIA,SAAeC,IAAtB,+B,4CAAO,sBAAAL,EAAA,+EACEC,MAAM,GAAD,OAAIH,EAAJ,WAAsBI,MAAK,SAAAC,GAAG,OAAIA,EAAIC,WAD7C,4C,sBAIA,SAAeE,IAAtB,+B,4CAAO,sBAAAN,EAAA,+EACEC,MAAM,GAAD,OAAIH,EAAJ,cAAyBI,MAAK,SAAAC,GAAG,OAAIA,EAAIC,WADhD,4C,sBCJA,IAAMG,EAAyB,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACpC,6BACGA,EAASC,KAAI,SAAAC,GAAO,OACnB,yBAAKC,UAAU,WACb,0BAAMA,UAAU,iBACbD,EAAQE,MAEX,uBAAGD,UAAU,iBACVD,EAAQG,YCPNC,EAAsB,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAH,OACjC,6BACGA,EAAYN,KAAI,SAAAO,GAAI,OACnB,yBAAKL,UAAU,QACb,uBAAGA,UAAU,QACVK,EAAKC,KAAKL,MAEb,uBAAGD,UAAU,eACVK,EAAKE,OAER,uBAAGP,UAAU,cACVK,EAAKH,MAER,kBAAC,EAAD,CAAaL,SAAUQ,EAAKR,iBCkDrBW,G,MAjEC,WAAO,IAAD,EACWC,mBAA0B,IADrC,mBACbL,EADa,KACAM,EADA,OAEsBD,mBAA0B,IAFhD,mBAEbE,EAFa,KAEEC,EAFF,OAGMH,mBAAS,IAHf,mBAGbI,EAHa,KAGNC,EAHM,OAIWL,oBAAS,GAJpB,mBAIbM,EAJa,KAIHC,EAJG,KA6CpB,OACE,yBAAKhB,UAAU,WACXI,EAAYa,OASV,oCACE,2BAAOC,MAAOL,EAAOM,SAhCX,SAACC,GAAsC,IACjDF,EAAUE,EAAEC,OAAZH,MAERJ,EAASI,GAET,IAAMI,EAASJ,EAAMK,cAAcC,OAMnC,GAJe,KAAXF,GACFV,EAAiBR,GAGfkB,EAAOL,OAAQ,CACjB,IAAMQ,EAAe,YAAIrB,GACtBsB,QAAO,SAAArB,GAAI,OAAIA,EAAKE,MAAMoB,SAASL,IACjCjB,EAAKH,KAAKyB,SAASL,MAExBV,EAAiBa,OAiBX,kBAAC,EAAD,CAAUrB,YAAaO,KAV3B,6BACE,4BAAQiB,KAAK,SAASC,QAAS,kBA1CrCb,GAAW,QACXc,QAAQC,IAAI,CACV3C,IACAM,IACAC,MAECJ,MAAK,YAA+B,IAAD,mBAA5ByC,EAA4B,KAArBC,EAAqB,KAAdpC,EAAc,KAC5BqC,EAAeF,EAAMlC,KAAI,SAACO,GAAD,sBAC1BA,EAD0B,CAE7BC,KAAM2B,EAAME,MAAK,SAAAC,GAAM,OAAIA,EAAOC,KAAOhC,EAAKiC,UAC9CzC,SAAUA,EAAS6B,QAAO,SAAA3B,GAAO,OAAIA,EAAQwC,SAAWlC,EAAKgC,WAG/D3B,EAAQwB,GACRtB,EAAiBsB,MAChBM,SAAQ,kBAAMxB,GAAW,QA2BxB,aAGCD,GAAY,6CCpDvB0B,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.dd06b896.chunk.js","sourcesContent":["const BASE_URL = 'https://jsonplaceholder.typicode.com';\n\nexport async function getPosts(): Promise<Post[]> {\n  return fetch(`${BASE_URL}/posts`).then(res => res.json());\n}\n\nexport async function getUsers(): Promise<User[]> {\n  return fetch(`${BASE_URL}/users`).then(res => res.json());\n}\n\nexport async function getComments(): Promise<Comment[]> {\n  return fetch(`${BASE_URL}/comments`).then(res => res.json());\n}\n","import React, { FC } from 'react';\n\ninterface Props {\n  comments: Comment[];\n}\n\nexport const CommentList: FC<Props> = ({ comments }) => (\n  <div>\n    {comments.map(comment => (\n      <div className=\"comment\">\n        <span className=\"comment__name\">\n          {comment.name}\n        </span>\n        <p className=\"comment__body\">\n          {comment.body}\n        </p>\n      </div>\n    ))}\n  </div>\n);\n","import React, { FC } from 'react';\nimport { CommentList } from '../CommentList/CommentList';\n\ninterface Props {\n  listOfPosts: CompletedPost[];\n}\n\nexport const PostList: FC<Props> = ({ listOfPosts }) => (\n  <div>\n    {listOfPosts.map(post => (\n      <div className=\"post\">\n        <p className=\"user\">\n          {post.user.name}\n        </p>\n        <p className=\"post__title\">\n          {post.title}\n        </p>\n        <p className=\"post__body\">\n          {post.body}\n        </p>\n        <CommentList comments={post.comments} />\n      </div>\n    ))}\n  </div>\n);\n","import React, { FC, useState, ChangeEvent } from 'react';\nimport { getPosts, getUsers, getComments } from './api/api';\nimport { PostList } from './PostList/PostList';\nimport './App.css';\n\nconst App: FC = () => {\n  const [listOfPosts, setPost] = useState<CompletedPost[]>([]);\n  const [filteredPosts, setFilteredPosts] = useState<CompletedPost[]>([]);\n  const [query, setQuery] = useState('');\n  const [isLoaded, setLoading] = useState(false);\n\n  const loadPosts = () => {\n    setLoading(true);\n    Promise.all([\n      getPosts(),\n      getUsers(),\n      getComments(),\n    ])\n      .then(([posts, users, comments]) => {\n        const preperdPosts = posts.map((post) => ({\n          ...post,\n          user: users.find(person => person.id === post.userId) as User,\n          comments: comments.filter(comment => comment.postId === post.id),\n        }));\n\n        setPost(preperdPosts);\n        setFilteredPosts(preperdPosts);\n      }).finally(() => setLoading(false));\n  };\n\n  const searchPosts = (e: ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.target;\n\n    setQuery(value);\n\n    const string = value.toLowerCase().trim();\n\n    if (string === '') {\n      setFilteredPosts(listOfPosts);\n    }\n\n    if (string.length) {\n      const serchedPosts = [...listOfPosts]\n        .filter(post => post.title.includes(string)\n        || post.body.includes(string));\n\n      setFilteredPosts(serchedPosts);\n    }\n  };\n\n  return (\n    <div className=\"wrapper\">\n      {!listOfPosts.length ? (\n        <div>\n          <button type=\"button\" onClick={() => loadPosts()}>\n          Load data\n          </button>\n          {isLoaded && <p>Loading...</p>}\n        </div>\n      )\n        : (\n          <>\n            <input value={query} onChange={searchPosts} />\n            <PostList listOfPosts={filteredPosts} />\n          </>\n        )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}